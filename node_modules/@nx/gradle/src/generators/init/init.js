"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initGenerator = initGenerator;
exports.addBuildGradleFileNextToSettingsGradle = addBuildGradleFileNextToSettingsGradle;
exports.updateNxJsonConfiguration = updateNxJsonConfiguration;
const devkit_1 = require("@nx/devkit");
const versions_1 = require("../../utils/versions");
const has_gradle_plugin_1 = require("../../utils/has-gradle-plugin");
const path_1 = require("path");
async function initGenerator(tree, options) {
    const tasks = [];
    if (!options.skipPackageJson && tree.exists('package.json')) {
        tasks.push((0, devkit_1.addDependenciesToPackageJson)(tree, {}, {
            '@nx/gradle': versions_1.nxVersion,
        }, undefined, options.keepExistingVersions));
    }
    await addBuildGradleFileNextToSettingsGradle(tree);
    addPlugin(tree);
    updateNxJsonConfiguration(tree);
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
    return (0, devkit_1.runTasksInSerial)(...tasks);
}
function addPlugin(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    if (!(0, has_gradle_plugin_1.hasGradlePlugin)(tree)) {
        nxJson.plugins ??= [];
        nxJson.plugins.push({
            plugin: '@nx/gradle',
            options: {
                testTargetName: 'test',
                classesTargetName: 'classes',
                buildTargetName: 'build',
            },
        });
        (0, devkit_1.updateNxJson)(tree, nxJson);
    }
}
/**
 * This function creates and populate build.gradle file next to the settings.gradle file.
 */
async function addBuildGradleFileNextToSettingsGradle(tree) {
    const settingsGradleFiles = await (0, devkit_1.globAsync)(tree, [
        '**/settings.gradle?(.kts)',
    ]);
    settingsGradleFiles.forEach((settingsGradleFile) => {
        addNxProjectGraphPluginToBuildGradle(settingsGradleFile, tree);
    });
}
/**
 * - creates a build.gradle file next to the settings.gradle file if it does not exist.
 * - adds the NxProjectGraphPlugin plugin to the build.gradle file if it does not exist.
 */
function addNxProjectGraphPluginToBuildGradle(settingsGradleFile, tree) {
    const filename = (0, path_1.basename)(settingsGradleFile);
    let gradleFilePath = 'build.gradle';
    if (filename.endsWith('.kts')) {
        gradleFilePath = 'build.gradle.kts';
    }
    gradleFilePath = (0, path_1.join)((0, path_1.dirname)(settingsGradleFile), gradleFilePath);
    let buildGradleContent = '';
    if (!tree.exists(gradleFilePath)) {
        tree.write(gradleFilePath, buildGradleContent); // create a build.gradle file near settings.gradle file if it does not exist
    }
    else {
        buildGradleContent = tree.read(gradleFilePath).toString();
    }
    const nxProjectGraphReportPlugin = filename.endsWith('.kts')
        ? `id("${versions_1.gradleProjectGraphPluginName}") version("${versions_1.gradleProjectGraphVersion}")`
        : `id "${versions_1.gradleProjectGraphPluginName}" version "${versions_1.gradleProjectGraphVersion}"`;
    if (buildGradleContent.includes('plugins {')) {
        if (!buildGradleContent.includes(versions_1.gradleProjectGraphPluginName)) {
            buildGradleContent = buildGradleContent.replace('plugins {', `plugins {
    ${nxProjectGraphReportPlugin}`);
        }
    }
    else {
        buildGradleContent = `plugins {
    ${nxProjectGraphReportPlugin}
}\n\r${buildGradleContent}`;
    }
    const applyNxProjectGraphReportPlugin = `plugin("${versions_1.gradleProjectGraphPluginName}")`;
    if (buildGradleContent.includes('allprojects {')) {
        if (!buildGradleContent.includes(`plugin("${versions_1.gradleProjectGraphPluginName}")`) &&
            !buildGradleContent.includes(`plugin('${versions_1.gradleProjectGraphPluginName}')`)) {
            devkit_1.logger.warn(`Please add the ${versions_1.gradleProjectGraphPluginName} plugin to your ${gradleFilePath}:
allprojects {
  apply {
      ${applyNxProjectGraphReportPlugin}
  }
}`);
        }
    }
    else {
        buildGradleContent = `${buildGradleContent}\n\rallprojects {
    apply {
        ${applyNxProjectGraphReportPlugin}
    }
  }`;
    }
    tree.write(gradleFilePath, buildGradleContent);
}
function updateNxJsonConfiguration(tree) {
    const nxJson = (0, devkit_1.readNxJson)(tree);
    if (!nxJson.namedInputs) {
        nxJson.namedInputs = {};
    }
    const defaultFilesSet = nxJson.namedInputs.default ?? [];
    nxJson.namedInputs.default = Array.from(new Set([...defaultFilesSet, '{projectRoot}/**/*']));
    const productionFileSet = nxJson.namedInputs.production ?? [];
    nxJson.namedInputs.production = Array.from(new Set([...productionFileSet, 'default', '!{projectRoot}/src/test/**/*']));
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
exports.default = initGenerator;
