"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = update;
exports.addBuildGradleFileNextToSettingsGradle = addBuildGradleFileNextToSettingsGradle;
const devkit_1 = require("@nx/devkit");
const node_path_1 = require("node:path");
/**
 * This migration adds task `projectReportAll` to build.gradle files
 */
async function update(tree) {
    await addBuildGradleFileNextToSettingsGradle(tree);
}
/**
 * This function creates and populate build.gradle file next to the settings.gradle file.
 */
async function addBuildGradleFileNextToSettingsGradle(tree) {
    const settingsGradleFiles = await (0, devkit_1.globAsync)(tree, [
        '**/settings.gradle?(.kts)',
    ]);
    settingsGradleFiles.forEach((settingsGradleFile) => {
        addProjectReportToBuildGradle(settingsGradleFile, tree);
    });
}
/**
 * - creates a build.gradle file next to the settings.gradle file if it does not exist.
 * - adds the project-report plugin to the build.gradle file if it does not exist.
 * - adds a task to generate project reports for all subprojects and included builds.
 */
function addProjectReportToBuildGradle(settingsGradleFile, tree) {
    const filename = (0, node_path_1.basename)(settingsGradleFile);
    let gradleFilePath = 'build.gradle';
    if (filename.endsWith('.kts')) {
        gradleFilePath = 'build.gradle.kts';
    }
    gradleFilePath = (0, node_path_1.join)((0, node_path_1.dirname)(settingsGradleFile), gradleFilePath);
    let buildGradleContent = '';
    if (!tree.exists(gradleFilePath)) {
        tree.write(gradleFilePath, buildGradleContent); // create a build.gradle file near settings.gradle file if it does not exist
    }
    else {
        buildGradleContent = tree.read(gradleFilePath).toString();
    }
    if (buildGradleContent.includes('allprojects')) {
        if (!buildGradleContent.includes('"project-report"')) {
            devkit_1.logger.warn(`Please add the project-report plugin to your ${gradleFilePath}:
allprojects {
  apply {
      plugin("project-report")
  }
}`);
        }
    }
    else {
        buildGradleContent += `\n\rallprojects {
  apply {
      plugin("project-report")
  }
}`;
    }
    if (!buildGradleContent.includes(`tasks.register("projectReportAll")`)) {
        if (gradleFilePath.endsWith('.kts')) {
            buildGradleContent += `\n\rtasks.register("projectReportAll") {
    // All project reports of subprojects
    allprojects.forEach {
        dependsOn(it.tasks.get("projectReport"))
    }

    // All projectReportAll of included builds
    gradle.includedBuilds.forEach {
        dependsOn(it.task(":projectReportAll"))
    }
}`;
        }
        else {
            buildGradleContent += `\n\rtasks.register("projectReportAll") {
        // All project reports of subprojects
        allprojects.forEach {
            dependsOn(it.tasks.getAt("projectReport"))
        }
    
        // All projectReportAll of included builds
        gradle.includedBuilds.forEach {
            dependsOn(it.task(":projectReportAll"))
        }
    }`;
        }
    }
    if (buildGradleContent) {
        tree.write(gradleFilePath, buildGradleContent);
    }
}
